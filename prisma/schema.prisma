// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  // added after epic-stack created
  projects    Project[]
  artboards   Artboard[]
  artboardVersions ArtboardVersion[]
  artboardBranches ArtboardBranch[]
  layers      Layer[]
  designs     Design[]
  assetImages AssetImage[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

// added after epic-stack created

model Project {
  id         String @id @default(cuid())
  name        String
  description String?
  isVisible   Boolean @default(true)
  slug       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  artboards Artboard[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
  // Unique constraint for slug scoped to ownerId
  @@unique([slug, ownerId])
}

model Artboard {
  id          String @id @default(cuid())
  name        String
  description String?
  isVisible   Boolean @default(true)
  slug       String
  width       Int
  height      Int
  backgroundColor String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  versions ArtboardVersion[]
  branches ArtboardBranch[]
  mergeRequests ArtboardMergeRequest[]

  layers Layer[]
  designs Design[]

  // non-unique foreign key
  @@index([projectId])
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([projectId, updatedAt])
  @@index([ownerId, updatedAt])
  // Unique constraint for slug scoped to ownerId
  @@unique([slug, ownerId])
}

model Layer {
  id          String @id @default(cuid())
  name        String
  description String?
  slug       String?
  visible     Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  artboard Artboard? @relation(fields: [artboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artboardId String?

  artboardVersionId String?
  artboardVersion   ArtboardVersion? @relation(fields: [artboardVersionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  next Layer? @relation("LayerDoublyLinkedList", fields: [nextId], references: [id])
  nextId String? @unique

  prev Layer? @relation("LayerDoublyLinkedList")
  prevId String? @unique

  parentId String?
  parent   Layer? @relation("ParentChildLayer", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children Layer[] @relation("ParentChildLayer")

  designs Design[]
  assetImages AssetImagesOnLayers[]

  // non-unique foreign key
  @@index([ownerId])
  @@index([artboardVersionId])
  @@index([parentId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
  // Unique constraint for slug scoped to ownerId
  @@unique([slug, ownerId, artboardId])
  @@unique([slug, ownerId, artboardVersionId])
}

model AssetImage {
  id          String @id @default(cuid())
  name        String
  slug       String
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  layers AssetImagesOnLayers[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
  // Unique constraint for slug scoped to ownerId
  @@unique([slug, ownerId])
}

model AssetImagesOnLayers {
  id          String @id @default(cuid())
  isVisible   Boolean @default(true)
  // order of asset images in the layer
  // considered linked lists, but not worth complexity unless I'm adding many asset images to a layer
  order       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assetImage AssetImage @relation(fields: [assetImageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  assetImageId String

  layer Layer @relation(fields: [layerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  layerId String

  // non-unique foreign key
  @@index([assetImageId])
  @@index([layerId])
  // This helps our order by in the user search a LOT
  @@index([assetImageId, layerId])
}

model Design {
  id         String @id @default(cuid())
  type      String // e.g. palette, size, fill, stroke, line, etc.
  visible   Boolean @default(true)
  selected Boolean @default(false)

  createdAt DateTime @default(now())

  // designs can be ordered by a linked list
  // https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations#one-to-one-self-relations
  // with prisma, only one can be "fully annotated" it seems
  // ! this is a one-to-one self relation between types
  // so a design with type "palette" should have a next design with type "palette" and not any other type
  next Design? @relation("DesignToDesign", fields: [nextId], references: [id])
  nextId String? @unique

  prev Design? @relation("DesignToDesign")
  prevId String? @unique

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  artboard Artboard? @relation(fields: [artboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artboardId String?

  artboardVersionId String?
  artboardVersion   ArtboardVersion? @relation(fields: [artboardVersionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  layer Layer? @relation(fields: [layerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  layerId String?

  palette Palette?
  size Size?
  fill Fill?
  stroke Stroke?
  line Line?
  rotate Rotate?
  layout Layout?
  template Template?

  // non-unique foreign key
  @@index([ownerId])
  @@index([layerId])
  @@index([artboardVersionId])
}

model Palette {
  id          String @id @default(cuid())

  format      String @default("hex") // e.g. hex, rgb, hsl, etc.
  value       String @default("000000")
  opacity     Float @default(1.0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Size {
  id          String @id @default(cuid())

  format      String @default("percent") // e.g. percent, px, inches, cm, etc.
  value       Float @default(10)
  basis     String @default("width") // e.g. width, height, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Fill {
  id          String @id @default(cuid())

  style      String @default("solid") // e.g. solid, none, gradient, etc.
  value       String @default("000000")
  basis     String @default("defined") // e.g. defined, random, palette, pixel, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Stroke {
  id          String @id @default(cuid())

  style      String @default("solid") // e.g. solid, gradient, etc.
  value       String @default("000000")
  basis     String @default("defined") // e.g. defined, random, palette, pixel, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Line {
  id          String @id @default(cuid())

  width     Float @default(1)
  format      String @default("pixel") // e.g. percent, px, inches, cm, etc.
  basis     String @default("size") // e.g. width, height, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Rotate {
  id          String @id @default(cuid())

  value     Float @default(0)
  basis     String @default("defined") // e.g. defined, random, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Layout {
  id          String @id @default(cuid())

  style     String @default("random") // e.g. random, grid, flex, etc.
  // random settings
  count     Int @default(1000)
  // grid settings
  rows     Int @default(9)
  columns     Int @default(9)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model Template {
  id          String @id @default(cuid())

  style     String @default("triangle") // e.g. triangle, square, circle, etc.
  // potentially images like logos later

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  design Design @relation(fields: [designId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  designId String @unique
}

model ArtboardVersion {
  id        String @id @default(cuid())
  name      String @default("latest")
  slug       String @default("latest")
  description String?
  latest   Boolean @default(true)

  // settings
  // 9:16 aspect ratio (vertical)
  width       Int @default(1080)
  height      Int @default(1920)
  background String @default("ffffff")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  artboard Artboard @relation(fields: [artboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artboardId String

  branch ArtboardBranch @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId String

  next ArtboardVersion? @relation("ArtboardVersionDoublyLinkedList", fields: [nextId], references: [id])
  nextId String? @unique

  prev ArtboardVersion? @relation("ArtboardVersionDoublyLinkedList")
  prevId String? @unique

  layers Layer[]
  designs Design[]

  // non-unique foreign key
  @@index([artboardId])
  @@index([branchId])
  @@index([ownerId])

  // Constraints to ensure only one 'latest' version per branch
  // and only one name 'latest' per branch
  @@unique([branchId, latest])
  @@unique([branchId, name])
  @@unique([branchId, slug])
}

model ArtboardBranch {
  id        String @id @default(cuid())
  name      String @default("main")
  slug      String @default("main")
  description String?
  default   Boolean @default(false)
  active    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  artboard Artboard @relation(fields: [artboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artboardId String

  parentId String?
  parent ArtboardBranch? @relation("ParentChildArtboardBranch", fields: [parentId], references: [id])
  children ArtboardBranch[] @relation("ParentChildArtboardBranch")

  versions ArtboardVersion[]
  mergeRequestsSource ArtboardMergeRequest[] @relation("ArtboardMergeRequestSourceBranch")
  mergeRequestsTarget ArtboardMergeRequest[] @relation("ArtboardMergeRequestTargetBranch")

  // non-unique foreign key
  @@index([artboardId])
  @@index([ownerId])

  // Constraints to ensure only one 'default' version per branch
  // and only unique name per branch
  @@unique([artboardId, default])
  @@unique([artboardId, name])
  @@unique([artboardId, slug])
}

model ArtboardMergeRequest {
  id       String @id @default(cuid())
  status   String @default("open") // e.g. open, closed, merged
  title    String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  artboard Artboard @relation(fields: [artboardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artboardId String

  sourceBranchId  String
  sourceBranch   ArtboardBranch @relation(name: "ArtboardMergeRequestSourceBranch", fields: [sourceBranchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  targetBranchId  String
  targetBranch   ArtboardBranch @relation(name: "ArtboardMergeRequestTargetBranch", fields: [targetBranchId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // non-unique foreign key
  @@index([artboardId])
  @@index([sourceBranchId])
  @@index([targetBranchId])
}
